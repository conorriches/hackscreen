#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('hackscreen:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


io.sockets.on('connection', function(socket) {
    console.log('Client has connected on socket ' + socket.id);

    socket.on('metrolink', function(data){
        //TODO: make this work. Then GET request from TFGM. Then parse. Then send data back to client.
    });

});

const mqtt = require('mqtt');
const client = mqtt.connect('mqtt://172.16.0.5');

client.on('connect', function(state){
    client.subscribe('door/outer/state');
    client.subscribe('door/toilet');
    client.subscribe('door/outer/opened/username');
    client.subscribe('door/outer/doorbell');
});


client.on('message', function (topic, message) {

    io.sockets.emit('notification', {
        topic : topic.toString(),
        message : message.toString()
    });

    var sys = require('sys')
    var exec = require('child_process').exec;

    // Work out if the music is playing, and store this as boolean
    // then after playing the noise we know whether to resume music
    var isPlaying = false;
    exec("curl -d '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"core.playback.get_state\"}' http://172.16.0.20:6680/mopidy/rpc", function puts(error, stdout, stderr) {
      try{
        var json = JSON.parse(stdout);
        if(json.result == "playing") isPlaying = true;
      }catch(e){

      }
    

      if(topic === 'door/outer/doorbell'){
        exec("curl -d '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"core.playback.pause\"}' http://172.16.0.20:6680/mopidy/rpc");
        exec("ogg123 ~/doorbell/audio/doorbell.ogg",   function puts(error, stdout, stderr) {
            if(isPlaying) exec("curl -d '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"core.playback.play\"}' http://172.16.0.20:6680/mopidy/rpc");
        });

      }else if(topic === 'door/outer/opened/username'){
        exec("curl -d '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"core.playback.pause\"}' http://172.16.0.20:6680/mopidy/rpc");
        exec("ogg123 ~/doorbell/audio/outer_door_opened.ogg",   function puts(error, stdout, stderr) {
            if(isPlaying) exec("curl -d '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"core.playback.play\"}' http://172.16.0.20:6680/mopidy/rpc");
        });
      }else if(topic === 'door/outer/aux'){
        exec("curl -d '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"core.playback.pause\"}' http://172.16.0.20:6680/mopidy/rpc");
        exec("mpg123 ~/doorbell/audio/Antiques.mp3",   function puts(error, stdout, stderr) {
            if(isPlaying) exec("curl -d '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"core.playback.play\"}' http://172.16.0.20:6680/mopidy/rpc");
        });

      }


    });

});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}