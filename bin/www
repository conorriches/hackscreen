#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("hackscreen:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require("socket.io")(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

io.sockets.on("connection", function(socket) {
  console.log("Client has connected on socket " + socket.id);

  socket.on("metrolink", function(data) {
    //TODO: make this work. Then GET request from TFGM. Then parse. Then send data back to client.
  });
});

const mqtt = require("mqtt");
const client = mqtt.connect("mqtt://172.16.0.5");

client.on("connect", function(state) {
  client.subscribe("door/outer/state");
  client.subscribe("door/toilet");
  client.subscribe("button/big/red/state");
  client.subscribe("door/outer/opened/username");
  client.subscribe("door/outer/doorbell");
  client.subscribe("door/outer/aux");
});

client.on("message", function(topic, message) {
  io.sockets.emit("notification", {
    topic: topic.toString(),
    message: message.toString()
  });

  var sys = require("sys");
  var exec = require("child_process").exec;

  // Work out if the music is playing, and store this as boolean
  // then after playing the noise we know whether to resume music
  var isPlaying = false;
  exec(
    'curl -d \'{"jsonrpc": "2.0", "id": 1, "method": "core.playback.get_state"}\' http://172.16.0.20:6680/mopidy/rpc',
    function puts(error, stdout, stderr) {
      try {
        var json = JSON.parse(stdout);
        if (json.result == "playing") isPlaying = true;
      } catch (e) {}

      if (!isPlaying) {
        exec(
          'curl -d \'{"jsonrpc": "2.0", "id": 1, "method": "core.playback.play"}\' http://172.16.0.20:6680/mopidy/rpc',
          function puts(error, stdout, stderr) {
            exec(
              'curl -d \'{"jsonrpc": "2.0", "id": 1, "method": "core.playback.stop"}\' http://172.16.0.20:6680/mopidy/rpc'
            );
          }
        );
      }

      if (topic === "door/outer/doorbell") {
        exec(
          'curl -d \'{"jsonrpc": "2.0", "id": 1, "method": "core.playback.pause"}\' http://172.16.0.20:6680/mopidy/rpc'
        );
        exec("ogg123 ~/doorbell/audio/doorbell.ogg", function puts(
          error,
          stdout,
          stderr
        ) {
          if (isPlaying)
            exec(
              'curl -d \'{"jsonrpc": "2.0", "id": 1, "method": "core.playback.play"}\' http://172.16.0.20:6680/mopidy/rpc'
            );
        });
      } else if (topic === "door/outer/opened/username") {
        exec(
          'curl -d \'{"jsonrpc": "2.0", "id": 1, "method": "core.playback.pause"}\' http://172.16.0.20:6680/mopidy/rpc'
        );
        exec("ogg123 ~/doorbell/audio/outer_door_opened.ogg", function puts(
          error,
          stdout,
          stderr
        ) {
          if (isPlaying)
            exec(
              'curl -d \'{"jsonrpc": "2.0", "id": 1, "method": "core.playback.play"}\' http://172.16.0.20:6680/mopidy/rpc'
            );
        });
      } else if (topic === "door/outer/aux") {
        exec(
          'curl -d \'{"jsonrpc": "2.0", "id": 1, "method": "core.playback.pause"}\' http://172.16.0.20:6680/mopidy/rpc'
        );
        exec("mpg123 ~/doorbell/audio/Antiques.mp3", function puts(
          error,
          stdout,
          stderr
        ) {
          if (isPlaying)
            exec(
              'curl -d \'{"jsonrpc": "2.0", "id": 1, "method": "core.playback.play"}\' http://172.16.0.20:6680/mopidy/rpc'
            );
        });
      } else if (topic == "button/big/red/state") {

        var vol = 30;
        //get the volume of the music
        exec(
          'curl -d \'{"jsonrpc": "2.0", "id": 1, "method": "core.playback.get_volume"}\' http://172.16.0.20:6680/mopidy/rpc',
          function puts(error, stdout, stderr) {
            try {
              var json = JSON.parse(stdout);
              vol = Number(json.result);
            } catch (e) {}
          }
        );
        //Reduce the volume
        exec("amixer sset 'PCM' " + (vol * 0.7) + "%", function puts(error, stdout, stderr) {
          //Pause the music
          exec(
            'curl -d \'{"jsonrpc": "2.0", "id": 1, "method": "core.playback.pause"}\' http://172.16.0.20:6680/mopidy/rpc',
            function puts(error, stdout, stderr) {
              var rnd = randomInt(0, 100);
              var audioCmd = "";

              //decide what annoyance we want
              switch (true) {
                case rnd > 90:
                  audioCmd = "mpg123 ~/doorbell/audio/profanity.mp3";
                  break;
                case rnd > 80:
                  audioCmd = "mpg123 ~/doorbell/audio/AirHorn.mp3";
                  break;
                case rnd > 70:
                  audioCmd = "mpg123 ~/doorbell/audio/homer.mp3";
                  break;
                case rnd > 60:
                  audioCmd = "mpg123 ~/doorbell/audio/homer-boogey.mp3";
                  break;
                case rnd > 40:
                  audioCmd = "mpg123 ~/doorbell/audio/bart-aye.mp3";
                  break;
                case rnd > 30:
                  audioCmd = "mpg123 ~/doorbell/audio/dixie.mp3";
                  break;
                case rnd > 20:
                  audioCmd = "mpg123 ~/doorbell/audio/Antiques.mp3";
                  break;
                case rnd > 10:
                  audioCmd = "mpg123 ~/doorbell/audio/THX.mp3";
                  break;
                case rnd > 4:
                  audioCmd = "ogg123 ~/doorbell/audio/WIlhelp_Scream.ogg";
                  break;
                case rnd > 2:
                  audioFIle = "mpg123 ~/doorbell/audio/yamaha.mp3";
                  break;
                default:
                  audioCmd = "ogg123 ~/doorbell/audio/ipenema.flac";
                  break;
              }

              //play the annoyance
              exec(audioCmd, function puts(error, stdout, stderr) {
                //reset volume
                exec("amixer sset 'PCM' 100%", function puts(
                  error,
                  stdout,
                  stderr
                ) {});

                //resume if we need to
                if (isPlaying)
                  exec(
                    'curl -d \'{"jsonrpc": "2.0", "id": 1, "method": "core.playback.play"}\' http://172.16.0.20:6680/mopidy/rpc'
                  );
              });
            }
          );
        });
      }
    }
  );
});

function randomInt(low, high) {
  return Math.floor(Math.random() * (high - low) + low);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
